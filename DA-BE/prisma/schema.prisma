generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id           Int            @id @default(autoincrement())
  categoryName String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  deletedAt    DateTime?
  deletedBy    Int?
  updatedBy    Int?
  wordcategory wordcategory[]
}

model definition {
  id             Int          @id @default(autoincrement())
  wordId         Int
  posId          Int
  partOfSpeech   String
  definitionText String
  usageExample   String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  deletedAt      DateTime?
  deletedBy      Int?
  updatedBy      Int?
  partofspeech   partofspeech @relation(fields: [posId], references: [id], map: "Definition_posId_fkey")
  word           word         @relation(fields: [wordId], references: [id], map: "Definition_wordId_fkey")

  @@index([posId], map: "Definition_posId_fkey")
  @@index([wordId], map: "Definition_wordId_fkey")
}

model exampleword {
  id          Int       @id @default(autoincrement())
  wordId      Int
  exampleText String
  source      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?
  deletedBy   Int?
  updatedBy   Int?
  word        word      @relation(fields: [wordId], references: [id], map: "ExampleWord_wordId_fkey")

  @@index([wordId], map: "ExampleWord_wordId_fkey")
}

model favoriteword {
  id        Int      @id @default(autoincrement())
  wordId    Int
  userId    Int
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], map: "FavoriteWord_userId_fkey")
  word      word     @relation(fields: [wordId], references: [id], map: "FavoriteWord_wordId_fkey")

  @@index([userId], map: "FavoriteWord_userId_fkey")
  @@index([wordId], map: "FavoriteWord_wordId_fkey")
}

model meaning {
  id          Int       @id @default(autoincrement())
  wordId      Int
  meaningText String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?
  deletedBy   Int?
  updatedBy   Int?
  word        word      @relation(fields: [wordId], references: [id], map: "Meaning_wordId_fkey")

  @@index([wordId], map: "Meaning_wordId_fkey")
}

model partofspeech {
  id           Int          @id @default(autoincrement())
  definitionId Int
  partOfSpeech String
  definition   definition[]
}

model pronunciation {
  id        Int       @id @default(autoincrement())
  wordId    Int
  audioPath String
  dialect   String
  ipaText   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
  deletedBy Int?
  updatedBy Int?
  word      word      @relation(fields: [wordId], references: [id], map: "Pronunciation_wordId_fkey")

  @@index([wordId], map: "Pronunciation_wordId_fkey")
}

model synonymsantonyms {
  id        Int       @id @default(autoincrement())
  wordId    Int
  synonyms  String
  antonyms  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
  deletedBy Int?
  updatedBy Int?
  word      word      @relation(fields: [wordId], references: [id], map: "SynonymsAntonyms_wordId_fkey")

  @@index([wordId], map: "SynonymsAntonyms_wordId_fkey")
}

model user {
  id                   Int                 @id @default(autoincrement())
  firstName            String
  lastName             String
  username             String              @unique(map: "User_username_key")
  email                String              @unique(map: "User_email_key")
  password             String
  confirmPassword      String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now())
  deletedAt            DateTime?
  deletedBy            Int?
  role                 String
  updatedBy            Int?
  resetPasswordOTP     String?
  resetPasswordExpires DateTime?
  lastLogin            DateTime?
  lastLoginIP          String?
  wordAdded            Int?
  favoriteword         favoriteword[]
  usersearchhistory    usersearchhistory[]
}

model usersearchhistory {
  id         Int      @id @default(autoincrement())
  wordId     Int
  userId     Int
  searchTime DateTime @default(now())
  user       user     @relation(fields: [userId], references: [id], map: "UserSearchHistory_userId_fkey")
  word       word     @relation(fields: [wordId], references: [id], map: "UserSearchHistory_wordId_fkey")

  @@index([userId], map: "UserSearchHistory_userId_fkey")
  @@index([wordId], map: "UserSearchHistory_wordId_fkey")
}

model word {
  id                Int                 @id @default(autoincrement())
  word              String              @unique(map: "Word_word_key")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  deletedAt         DateTime?
  deletedBy         Int?
  updatedBy         Int?
  definition        definition[]
  exampleword       exampleword[]
  favoriteword      favoriteword[]
  meaning           meaning[]
  pronunciation     pronunciation[]
  synonymsantonyms  synonymsantonyms[]
  usersearchhistory usersearchhistory[]
  wordcategory      wordcategory[]
}

model wordcategory {
  id           Int      @id @default(autoincrement())
  wordId       Int
  categoryId   Int
  categoryName String
  category     category @relation(fields: [categoryId], references: [id], map: "WordCategory_categoryId_fkey")
  word         word     @relation(fields: [wordId], references: [id], map: "WordCategory_wordId_fkey")

  @@index([categoryId], map: "WordCategory_categoryId_fkey")
  @@index([wordId], map: "WordCategory_wordId_fkey")
}
