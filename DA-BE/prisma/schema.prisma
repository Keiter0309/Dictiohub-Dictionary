generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id             Int            @id @default(autoincrement())
  categoryName   String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  deletedAt      DateTime?
  deletedBy      Int?
  updatedBy      Int?
  wordCategories WordCategory[]

  @@map("category")
}

model Definition {
  id                   Int          @id @default(autoincrement())
  wordId               Int
  posId                Int
  partOfSpeech         String
  definitionText       String
  usageExample         String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now())
  deletedAt            DateTime?
  deletedBy            Int?
  updatedBy            Int?
  partOfSpeechRelation PartOfSpeech @relation(fields: [posId], references: [id], map: "Definition_posId_fkey")
  word                 Word         @relation(fields: [wordId], references: [id], map: "Definition_wordId_fkey")

  @@index([posId], map: "Definition_posId_fkey")
  @@index([wordId], map: "Definition_wordId_fkey")
  @@map("definition")
}

model ExampleWord {
  id          Int       @id @default(autoincrement())
  wordId      Int
  exampleText String
  source      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?
  deletedBy   Int?
  updatedBy   Int?
  word        Word      @relation(fields: [wordId], references: [id], map: "ExampleWord_wordId_fkey")

  @@index([wordId], map: "ExampleWord_wordId_fkey")
  @@map("exampleword")
}

model FavoriteWord {
  id        Int      @id @default(autoincrement())
  wordId    Int
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], map: "FavoriteWord_userId_fkey")
  word      Word     @relation(fields: [wordId], references: [id], map: "FavoriteWord_wordId_fkey")

  @@index([userId], map: "FavoriteWord_userId_fkey")
  @@index([wordId], map: "FavoriteWord_wordId_fkey")
  @@map("favoriteword")
}

model Meaning {
  id          Int       @id @default(autoincrement())
  wordId      Int
  meaningText String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?
  deletedBy   Int?
  updatedBy   Int?
  word        Word      @relation(fields: [wordId], references: [id], map: "Meaning_wordId_fkey")

  @@index([wordId], map: "Meaning_wordId_fkey")
  @@map("meaning")
}

model PartOfSpeech {
  id           Int          @id @default(autoincrement())
  definitionId Int?
  partOfSpeech String       @unique
  definitions  Definition[]

  @@map("partofspeech")
}

model Pronunciation {
  id        Int       @id @default(autoincrement())
  wordId    Int
  audioPath String
  dialect   String
  ipaText   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
  deletedBy Int?
  updatedBy Int?
  word      Word      @relation(fields: [wordId], references: [id], map: "Pronunciation_wordId_fkey")

  @@index([wordId], map: "Pronunciation_wordId_fkey")
  @@map("pronunciation")
}

model SynonymsAntonyms {
  id        Int       @id @default(autoincrement())
  wordId    Int
  synonyms  String
  antonyms  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
  deletedBy Int?
  updatedBy Int?
  word      Word      @relation(fields: [wordId], references: [id], map: "SynonymsAntonyms_wordId_fkey")

  @@index([wordId], map: "SynonymsAntonyms_wordId_fkey")
  @@map("synonymsantonyms")
}

model User {
  id                   Int                 @id @default(autoincrement())
  firstName            String
  lastName             String
  username             String              @unique(map: "User_username_key")
  email                String              @unique(map: "User_email_key")
  password             String
  confirmPassword      String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now())
  deletedAt            DateTime?
  deletedBy            Int?
  role                 String
  updatedBy            Int?
  resetPasswordOTP     String?
  resetPasswordExpires DateTime?
  lastLogin            DateTime?
  lastLoginIP          String?
  wordAdded            Int?
  favoriteWords        FavoriteWord[]
  searchHistory        UserSearchHistory[]

  @@map("user")
}

model UserSearchHistory {
  id         Int      @id @default(autoincrement())
  wordId     Int
  userId     Int
  searchTime DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], map: "UserSearchHistory_userId_fkey")
  word       Word     @relation(fields: [wordId], references: [id], map: "UserSearchHistory_wordId_fkey")

  @@index([userId], map: "UserSearchHistory_userId_fkey")
  @@index([wordId], map: "UserSearchHistory_wordId_fkey")
  @@map("usersearchhistory")
}

model Word {
  id               Int                 @id @default(autoincrement())
  word             String              @unique(map: "Word_word_key")
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now())
  deletedAt        DateTime?
  deletedBy        Int?
  updatedBy        Int?
  definitions      Definition[]
  exampleWords     ExampleWord[]
  favoriteWords    FavoriteWord[]
  meanings         Meaning[]
  pronunciations   Pronunciation[]
  synonymsAntonyms SynonymsAntonyms[]
  searchHistories  UserSearchHistory[]
  wordCategories   WordCategory[]

  @@map("word")
}

model WordCategory {
  id           Int      @id @default(autoincrement())
  wordId       Int
  categoryId   Int
  categoryName String
  category     Category @relation(fields: [categoryId], references: [id], map: "WordCategory_categoryId_fkey")
  word         Word     @relation(fields: [wordId], references: [id], map: "WordCategory_wordId_fkey")

  @@index([categoryId], map: "WordCategory_categoryId_fkey")
  @@index([wordId], map: "WordCategory_wordId_fkey")
  @@map("wordcategory")
}